{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "864ab7ec-6c9c-43db-b08d-f6db2c279fac",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n",
    "from sklearn.metrics import accuracy_score, mean_squared_error\n",
    "\n",
    "# ------------------------------\n",
    "# 🎯 App Title\n",
    "# ------------------------------\n",
    "st.title(\"🔮 Machine Learning Prediction App\")\n",
    "\n",
    "# ------------------------------\n",
    "# 📁 Upload CSV\n",
    "# ------------------------------\n",
    "uploaded_file = st.file_uploader(\"Upload your dataset (CSV)\", type=[\"csv\"])\n",
    "\n",
    "if uploaded_file is not None:\n",
    "    data = pd.read_csv(uploaded_file)\n",
    "    st.subheader(\"📊 Dataset Preview\")\n",
    "    st.write(data.head())\n",
    "\n",
    "    # ------------------------------\n",
    "    # 🎯 Select Target Column\n",
    "    # ------------------------------\n",
    "    target_column = st.selectbox(\"Select target column (the one to predict):\", data.columns)\n",
    "\n",
    "    # ------------------------------\n",
    "    # ⚙️ Feature Selection\n",
    "    # ------------------------------\n",
    "    features = [col for col in data.columns if col != target_column]\n",
    "    X = data[features]\n",
    "    y = data[target_column]\n",
    "\n",
    "    # ------------------------------\n",
    "    # 📈 Problem Type\n",
    "    # ------------------------------\n",
    "    problem_type = st.radio(\"Select problem type:\", [\"Classification\", \"Regression\"])\n",
    "\n",
    "    # ------------------------------\n",
    "    # 🧩 Train-Test Split\n",
    "    # ------------------------------\n",
    "    test_size = st.slider(\"Test Size (fraction of data for testing):\", 0.1, 0.5, 0.2)\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)\n",
    "\n",
    "    # ------------------------------\n",
    "    # 🤖 Model Training\n",
    "    # ------------------------------\n",
    "    if st.button(\"Train Model\"):\n",
    "        if problem_type == \"Classification\":\n",
    "            model = RandomForestClassifier()\n",
    "        else:\n",
    "            model = RandomForestRegressor()\n",
    "\n",
    "        model.fit(X_train, y_train)\n",
    "        y_pred = model.predict(X_test)\n",
    "\n",
    "        st.success(\"✅ Model training complete!\")\n",
    "\n",
    "        # ------------------------------\n",
    "        # 📊 Metrics\n",
    "        # ------------------------------\n",
    "        if problem_type == \"Classification\":\n",
    "            acc = accuracy_score(y_test, y_pred)\n",
    "            st.write(f\"**Accuracy:** {acc:.3f}\")\n",
    "        else:\n",
    "            mse = mean_squared_error(y_test, y_pred)\n",
    "            st.write(f\"**Mean Squared Error:** {mse:.3f}\")\n",
    "\n",
    "        # ------------------------------\n",
    "        # 🧮 Make New Predictions\n",
    "        # ------------------------------\n",
    "        st.subheader(\"🔍 Predict with new data\")\n",
    "        input_data = {}\n",
    "        for col in features:\n",
    "            val = st.text_input(f\"Enter value for {col}:\")\n",
    "            input_data[col] = float(val) if val else 0.0\n",
    "\n",
    "        if st.button(\"Predict\"):\n",
    "            input_df = pd.DataFrame([input_data])\n",
    "            prediction = model.predict(input_df)[0]\n",
    "            st.success(f\"🎯 Predicted value: {prediction}\")\n",
    "\n",
    "else:\n",
    "    st.info(\"👆 Please upload a CSV file to get started.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
